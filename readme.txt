Оптимизации:

Использование memory_order_relaxed:

В методах push и pop для загрузки текущих значений tail и head используется memory_order_relaxed. Это позволяет избежать ненужной синхронизации, так как мы не ожидаем, что другие потоки будут читать эти значения сразу.

Синхронизация только при необходимости:
memory_order_acquire используется только при чтении head в push и tail в pop, чтобы гарантировать, что все предыдущие операции, связанные с записью, завершены до того, как мы будем читать эти значения.

Синхронизация при записи:
memory_order_release используется при записи в tail и head, чтобы гарантировать, что все изменения, сделанные до этой записи, будут видны другим потокам.

Добавлена блокировка потоков для взаимодействия с вектором:
Блокировка потока перед проверкой для обновления данных.
Блокирует потока перед проверкой для получения данных.
